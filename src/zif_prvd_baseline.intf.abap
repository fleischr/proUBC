interface ZIF_PRVD_BASELINE
  public .


  types:
* Generated by abap-openapi-client
* Baseline API, v1.0.0
* Component schema: Account, object
    BEGIN OF account,
      id         TYPE string,
      created_at TYPE string,
      network_id TYPE string,
      user_id    TYPE string,
      vault_id   TYPE string,
      key_id     TYPE string,
      public_key TYPE string,
      address    TYPE string,
    END OF account .
  types:
* Component schema: AssociateWorkgroupUserRequest, object
    BEGIN OF associateworkgroupuserrequest,
      user_id TYPE string,
    END OF associateworkgroupuserrequest .
* Component schema: AuthenticationRequest, string
  types AUTHENTICATIONREQUEST type STRING .
  types:
* Component schema: AuthenticationResponse, object
    BEGIN OF authenticationresponse,
      user  TYPE user,
      token TYPE token,
    END OF authenticationresponse .
  types:
* Component schema: Workflow, object
    BEGIN OF workflow,
      circuits       TYPE string,
      identifier     TYPE string,
      parcicipants   TYPE STANDARD TABLE OF string WITH EMPTY KEY,
      shield         TYPE string,
      workstep_index TYPE i,
    END OF workflow .
  types:
* Component schema: BaselineRecord, object
    BEGIN OF baselinerecord,
      baseline_id TYPE string,
      id          TYPE string,
      type        TYPE string,
      identifier  TYPE string,
      workflow    TYPE workflow,
    END OF baselinerecord .
  types:
* Component schema: BusinessObject, object
    BEGIN OF businessobject,
      type    TYPE string,
      id      TYPE string,
      payload TYPE string,
    END OF businessobject .
  types:
* Component schema: Chainspec, object
    BEGIN OF subchainspec_alloc,
      dummy_workaround TYPE i,
    END OF subchainspec_alloc .
  types:
    BEGIN OF chainspec,
      config     TYPE string,
      alloc      TYPE subchainspec_alloc,
      coinbase   TYPE string,
      difficulty TYPE string,
      extradata  TYPE string,
      gaslimit   TYPE string,
      nonce      TYPE string,
      mixhash    TYPE string,
      parenthash TYPE string,
      timestamp  TYPE string,
    END OF chainspec .
  types:
* Component schema: Circuit, object
    BEGIN OF circuit,
      id               TYPE string,
      created_at       TYPE string,
      vault_id         TYPE string,
      proving_key_id   TYPE string,
      verifying_key_id TYPE string,
      name             TYPE string,
      description      TYPE string,
      identifier       TYPE string,
      provider         TYPE string,
      proving_scheme   TYPE string,
      curve            TYPE string,
      status           TYPE string,
      store_id         TYPE string,
    END OF circuit .
  types:
* Component schema: CompiledArtifact, object
" todo, handle array in ABI
    BEGIN OF compiledartifact,
      contractname TYPE string,
      abi          TYPE REF TO data,
      bytecode     TYPE string,
      source       TYPE string,
    END OF compiledartifact .
  types:
* Component schema: Participant, object
    BEGIN OF participant,
      address            TYPE string,
      metadata           TYPE string,
      api_endpoint       TYPE string,
      messaging_endpoint TYPE string,
    END OF participant .
  types:
* Component schema: Config, object
    BEGIN OF config,
      counterparties             TYPE participant,
      env                        TYPE string,
      errors                     TYPE string,
      network_id                 TYPE string,
      organization_address       TYPE string,
      organization_id            TYPE string,
      organization_refresh_token TYPE string,
      registry_contract_address  TYPE string,
    END OF config .
  types:
* Component schema: Security, object
    BEGIN OF security,
      egress  TYPE string,
      ingress TYPE string,
    END OF security .
  types:
* Component schema: ConnectorConfig, object
    BEGIN OF connectorconfig,
      image        TYPE string,
      gateway_port TYPE i,
      provider_id  TYPE string,
      region       TYPE string,
      role         TYPE string,
      rpc_port     TYPE i,
      security     TYPE security,
      target_id    TYPE string,
      api_port     TYPE i,
      api_url      TYPE string,
    END OF connectorconfig .
  types:
* Component schema: Connector, object
    BEGIN OF connector,
      id              TYPE string,
      created_at      TYPE string,
      workgroup_id    TYPE string,
      network_id      TYPE string,
      organization_id TYPE string,
      name            TYPE string,
      type            TYPE string,
      status          TYPE string,
      description     TYPE string,
      config          TYPE connectorconfig,
    END OF connector .
  types:
* Component schema: ContractParams, object
    BEGIN OF contractparams,
      account_id        TYPE string,
      compiled_artifact TYPE compiledartifact,
    END OF contractparams .
  types:
* Component schema: Contract, object
    BEGIN OF contract,
      id              TYPE string,
      created_at      TYPE string,
      workgroup_id    TYPE string,
      organization_id TYPE string,
      network_id      TYPE string,
      contract_id     TYPE string,
      transaction_id  TYPE string,
      name            TYPE string,
      address         TYPE string,
      type            TYPE string,
      accessed_at     TYPE string,
      pubsub_prefix   TYPE string,
      params          TYPE contractparams,
    END OF contract .
  types:
* Component schema: CreateSealorUnsealKey, object
    BEGIN OF createsealorunsealkey,
      key             TYPE string,
      validation_hash TYPE string,
    END OF createsealorunsealkey .
  types:
* Component schema: Credentials, object
    BEGIN OF credentials,
      aws_access_key_id     TYPE string,
      aws_secret_access_key TYPE string,
    END OF credentials .
  types:
* Component schema: DeployContract, object
    BEGIN OF ty_deploycontract,
      id              TYPE string,
      created_at      TYPE string,
      workgroup_id    TYPE string,
      organization_id TYPE string,
      network_id      TYPE string,
      contract_id     TYPE string,
      transaction_id  TYPE string,
      name            TYPE string,
      address         TYPE string,
      type            TYPE string,
      params          TYPE contractparams,
      accessed_at     TYPE string,
      pubsub_prefix   TYPE string,
    END OF ty_deploycontract .
  types:
* Component schema: DeriveKeyRequest, object
    BEGIN OF derivekeyrequest,
      nonce       TYPE i,
      context     TYPE string,
      name        TYPE string,
      description TYPE string,
    END OF derivekeyrequest .
  types:
* Component schema: Error, object
    BEGIN OF error,
      code    TYPE string,
      message TYPE string,
    END OF error .
  types:
* Component schema: ExecuteContractRequest, object
    BEGIN OF executecontractrequest,
      method     TYPE string,
      params     TYPE STANDARD TABLE OF string WITH EMPTY KEY,
      value      TYPE i,
      account_id TYPE string,
    END OF executecontractrequest .
  types:
* Component schema: ExecuteContractResponse, object
    BEGIN OF executecontractresponse,
      confidence TYPE string,
      ref        TYPE string,
    END OF executecontractresponse .
  types:
    " TODO fix Ingress type
* Component schema: Ingress, object
    "  TYPES: BEGIN OF ingress,
    "           0_0_0_0_0 TYPE string,
    "         END OF ingress.
* Component schema: IssueVerifiableCredential, object
    BEGIN OF issueverifiablecredential,
      address         TYPE string,
      organization_id TYPE string,
      public_key      TYPE string,
      signature       TYPE string,
    END OF issueverifiablecredential .
  types:
* Component schema: JWK, object
    BEGIN OF jwk,
      kid         TYPE string,
      n           TYPE string,
      e           TYPE string,
      fingerprint TYPE string,
      public_key  TYPE string,
    END OF jwk .
  types:
* Component schema: Key, object
    BEGIN OF key,
      type        TYPE string,
      usage       TYPE string,
      spec        TYPE string,
      name        TYPE string,
      description TYPE string,
      public_key  TYPE string,
    END OF key .
  types:
* Component schema: LastBlockHeader, object
    BEGIN OF lastblockheader,
      difficulty       TYPE string,
      extradata        TYPE string,
      gaslimit         TYPE string,
      gasused          TYPE string,
      hash             TYPE string,
      logsbloom        TYPE string,
      miner            TYPE string,
      mixhash          TYPE string,
      nonce            TYPE string,
      number           TYPE string,
      parenthash       TYPE string,
      receiptsroot     TYPE string,
      sha3uncles       TYPE string,
      stateroot        TYPE string,
      timestamp        TYPE string,
      transactionsroot TYPE string,
    END OF lastblockheader .
  types:
* Component schema: LoadBalancer, object
    BEGIN OF loadbalancer,
      id           TYPE string,
      created_at   TYPE string,
      network_id   TYPE string,
      workgroup_id TYPE string,
      name         TYPE string,
      type         TYPE string,
      host         TYPE string,
      ipv4         TYPE string,
      ipv6         TYPE string,
      description  TYPE string,
      region       TYPE string,
      status       TYPE string,
    END OF loadbalancer .
  types:
* Component schema: LogMessage, object
    BEGIN OF logmessage,
      baseline_id TYPE string,
      message     TYPE string,
      object_id   TYPE string,
      severity    TYPE string,
      timestamp   TYPE string,
      type        TYPE string,
    END OF logmessage .
  types:
* Component schema: Message, object
    BEGIN OF message,
      baseline_id      TYPE string,
      errors           TYPE string,
      id               TYPE string,
      message_id       TYPE string,
      payload          TYPE string,
      protocol_message TYPE string,
      recipients       TYPE string,
      type             TYPE string,
    END OF message .
  types:
* Component schema: Network, object
    BEGIN OF network,
      id           TYPE string,
      created_at   TYPE string,
      workgroup_id TYPE string,
      name         TYPE string,
      description  TYPE string,
      enabled      TYPE abap_bool,
      chain_id     TYPE string,
      config       TYPE string,
    END OF network .
* Component schema: NetworkStatus, string
  types NETWORKSTATUS type STRING .
  types:
* Component schema: OpenIDConfig, object
    BEGIN OF subopenidconfig_tenant_region_,
      dummy_workaround TYPE i,
    END OF subopenidconfig_tenant_region_ .
  types:
    BEGIN OF subopenidconfig_rbac_url,
      dummy_workaround TYPE i,
    END OF subopenidconfig_rbac_url .
  types:
    BEGIN OF subopenidconfig_end_session_en,
      dummy_workaround TYPE i,
    END OF subopenidconfig_end_session_en .
  types:
    BEGIN OF openidconfig,
      authorization_endpoint         TYPE string,
      claims_supported               TYPE STANDARD TABLE OF string WITH EMPTY KEY,
      cloud_instance_name            TYPE string,
      device_authorization_endpoint  TYPE string,
      end_session_endpoint           TYPE subopenidconfig_end_session_en,
      frontchannel_logout_supported  TYPE abap_bool,
      http_logout_supported          TYPE abap_bool,
      id_token_signing_alg_values_su TYPE STANDARD TABLE OF string WITH EMPTY KEY,
      issuer                         TYPE string,
      jwks_uri                       TYPE string,
      rbac_url                       TYPE subopenidconfig_rbac_url,
      request_uri_parameter_supporte TYPE abap_bool,
      response_modes_supported       TYPE STANDARD TABLE OF string WITH EMPTY KEY,
      response_types_supported       TYPE STANDARD TABLE OF string WITH EMPTY KEY,
      scopes_supported               TYPE STANDARD TABLE OF string WITH EMPTY KEY,
      subject_types_supported        TYPE STANDARD TABLE OF string WITH EMPTY KEY,
      tenant_region_scope            TYPE subopenidconfig_tenant_region_,
      token_endpoint                 TYPE string,
      token_endpoint_auth_methods_su TYPE STANDARD TABLE OF string WITH EMPTY KEY,
      userinfo_endpoint              TYPE string,
    END OF openidconfig .
  types:
* Component schema: Organization, object
    BEGIN OF organization,
      name        TYPE string,
      description TYPE string,
    END OF organization .
  types:
* Component schema: ProtocolMessage, object
    BEGIN OF protocolmessage,
      baseline_id TYPE string,
      opcode      TYPE string,
      sender      TYPE string,
      recipient   TYPE string,
      shield      TYPE string,
      identifer   TYPE string,
      signature   TYPE string,
      type        TYPE string,
      payload     TYPE xstring,
    END OF protocolmessage .
  types:
    BEGIN OF protocolmessage_req,
      id               TYPE zbpiobj-object_id,
      payload          TYPE REF TO data,
      payload_mimetype TYPE string,
      type             TYPE string,
      subject_account_id TYPE zprvdtenantid,
      workgroup_id TYPE zprvdtenantid,
    END OF protocolmessage_req .
  types:
    BEGIN OF protocolmessage_resp,
            baseline_id TYPE string,
            proof TYPE string,
            recipients TYPE tab_string,
            subject_account_id TYPE zprvdtenantid,
            type TYPE string,
            workgroup_id TYPE zprvdtenantid,
       END OF protocolmessage_resp .
  types:
    BEGIN OF bpiobjects_req,
      type    TYPE string,
      id      TYPE string,
      payload TYPE string,
    END OF bpiobjects_req .
  types:
* Component schema: ProtocolMessagePayload, string
    "  TYPES protocolmessagepayload TYPE string.
* Component schema: ProveRequest, object
    BEGIN OF proverequest,
      identifier     TYPE string,
      proving_scheme TYPE string,
      curve          TYPE string,
      provider       TYPE string,
      name           TYPE string,
    END OF proverequest .
  types:
* Component schema: Secret, object
    BEGIN OF secret,
      id          TYPE string,
      created_at  TYPE string,
      vault_id    TYPE string,
      type        TYPE string,
      name        TYPE string,
      description TYPE string,
      value       TYPE string,
    END OF secret .
  types:
* Component schema: Token, object
    BEGIN OF token,
      id              TYPE string,
      scope           TYPE string,
      expires_in      TYPE f,
      access_token    TYPE string,
      refresh_token   TYPE string,
      token           TYPE string,
      permissions     TYPE f,
      organization_id TYPE string,
      application_id  TYPE string,
    END OF token .
* Component schema: Transaction, string
  types TRANSACTION type STRING .
  types:
* Component schema: UnsealVaultRequest, object
    BEGIN OF unsealvaultrequest,
      key TYPE string,
    END OF unsealvaultrequest .
  types:
* Component schema: User, object
    BEGIN OF user,
      id                         TYPE string,
      created_at                 TYPE string,
      name                       TYPE string,
      first_name                 TYPE string,
      last_name                  TYPE string,
      email                      TYPE string,
      password                   TYPE string,
      permissions                TYPE i,
      privacy_policy_agreed_at   TYPE string,
      terms_of_service_agreed_at TYPE string,
    END OF user .
* Component schema: Vault, string
  types VAULT type STRING .
  types:
* Component schema: Witness, object
    BEGIN OF witness,
      x TYPE string,
      y TYPE string,
    END OF witness .
  types:
* Component schema: VerifyProofRequest, object
    BEGIN OF verifyproofrequest,
      witness TYPE witness,
      proof   TYPE string,
      store   TYPE abap_bool,
    END OF verifyproofrequest .
  types:
* Component schema: Wallet, object
    BEGIN OF wallet,
      id         TYPE string,
      created_at TYPE string,
      network_id TYPE string,
      user_id    TYPE string,
      vault_id   TYPE string,
      key_id     TYPE string,
      purpose    TYPE i,
      public_key TYPE string,
    END OF wallet .
  types:
* Component schema: WorkgroupConfig, object
    BEGIN OF workgroupconfig,
      baselined      TYPE abap_bool,
      webhook_secret TYPE string,
      network_id     TYPE string,
    END OF workgroupconfig .
  types:
* Component schema: Workgroup, object
    BEGIN OF workgroup,
      id          TYPE string,
      created_at  TYPE string,
      network_id  TYPE string,
      user_id     TYPE string,
      name        TYPE string,
      description TYPE string,
      type        TYPE string,
      config      TYPE workgroupconfig,
      hidden      TYPE abap_bool,
    END OF workgroup .
  types:
* Component schema: response_listconnectors, array
    response_listconnectors TYPE STANDARD TABLE OF connector WITH EMPTY KEY .
  types:
* Component schema: response_listtokens, array
    response_listtokens TYPE STANDARD TABLE OF token WITH EMPTY KEY .
  types:
* Component schema: response_listusers, array
    response_listusers TYPE STANDARD TABLE OF user WITH EMPTY KEY .
  types:
* Component schema: response_listworkgroups, array
    response_listworkgroups TYPE STANDARD TABLE OF workgroup WITH EMPTY KEY .
  types:
* Component schema: response_listworkgroupusers, array
    response_listworkgroupusers TYPE STANDARD TABLE OF user WITH EMPTY KEY .

"! GET - "List accounts"
"! Operation id: ListAccounts
"! Parameter: page, optional, query
"! Parameter: rpp, optional, query
"! Response: 200
"!     application/json; charset=UTF-8, array
"! Response: 401
"! Response: 500
"! Response: default
"!     application/json, #/components/schemas/Error
  methods LISTACCOUNTS
    importing
      !PAGE type I optional
      !RPP type I optional
    raising
      CX_STATIC_CHECK .
"! POST - "Create account"
"! Operation id: CreateAccount
"! Response: 201
"!     application/json; charset=UTF-8, #/components/schemas/Account
"! Response: 4XX
"! Response: 5XX
"! Response: default
"!     application/json, #/components/schemas/Error
"! Body ref: #/components/schemas/Account
  methods CREATEACCOUNT
    importing
      !BODY type ACCOUNT
    raising
      CX_STATIC_CHECK .
"! GET - "Get account details"
"! Operation id: GetAccountDetails
"! Parameter: id, required, path
"! Response: 200
"!     application/json, #/components/schemas/Account
"! Response: 403
"! Response: 404
"! Response: default
"!     application/json, #/components/schemas/Error
  methods GETACCOUNTDETAILS
    importing
      !ID type STRING
    returning
      value(RETURN_DATA) type ACCOUNT
    raising
      CX_STATIC_CHECK .
"! POST - "User authentication"
"! Operation id: Authentication
"! Response: 201
"!     application/json, #/components/schemas/AuthenticationResponse
"! Response: 401
"! Body ref: #/components/schemas/AuthenticationRequest
  methods AUTHENTICATION
    importing
      !BODY type AUTHENTICATIONREQUEST
      !IV_TENANTID type ZPRVDTENANTID
    returning
      value(RETURN_DATA) type AUTHENTICATIONRESPONSE
    raising
      CX_STATIC_CHECK .
  "VALUE(return_data) TYPE authenticationresponse
"! POST - "Bearer authentication"
"! Operation id: Authentication
"! Response: 201
"!     application/json, #/components/schemas/AuthenticationResponse
"! Response: 401
"! Body ref: #/components/schemas/AuthenticationRequest
  methods BEARERAUTHENTICATION
    importing
      !BODY type AUTHENTICATIONREQUEST
      !IV_TENANTID type ZPRVDTENANTID
    exporting
      !CODE type I
    returning
      value(APIRESPONSE) type ref to DATA
    raising
      CX_STATIC_CHECK .
"! GET - "List connectors"
"! Operation id: ListConnectors
"! Parameter: page, optional, query
"! Parameter: rpp, optional, query
"! Parameter: public, optional, query
"! Response: 200
"!     application/json, #/components/schemas/response_listconnectors
"! Response: 422
"!     application/json, #/components/schemas/Error
"! Response: default
"!     application/json, #/components/schemas/Error
  methods LISTCONNECTORS
    importing
      !PAGE type I optional
      !RPP type I optional
      !PUBLIC type ABAP_BOOL optional
    returning
      value(RETURN_DATA) type RESPONSE_LISTCONNECTORS
    raising
      CX_STATIC_CHECK .
"! POST - "Create connector"
"! Operation id: CreateConnector
"! Response: 201
"!     application/json; charset=UTF-8, #/components/schemas/Connector
"! Response: 401
"! Response: 403
"! Response: 404
"! Response: 503
"! Response: default
"!     application/json, #/components/schemas/Error
"! Body ref: #/components/schemas/Connector
  methods CREATECONNECTOR
    importing
      !BODY type CONNECTOR
    raising
      CX_STATIC_CHECK .
"! GET - "Get connector details"
"! Operation id: GetConnectorDetails
"! Parameter: id, required, path
"! Response: 200
"!     application/json; charset=UTF-8, #/components/schemas/Connector
"! Response: 401
"! Response: 403
"! Response: 404
"! Response: 503
"! Response: default
"!     application/json, #/components/schemas/Error
  methods GETCONNECTORDETAILS
    importing
      !ID type STRING
    raising
      CX_STATIC_CHECK .
"! DELETE - "Delete connector"
"! Operation id: deleteConnector
"! Parameter: id, required, path
"! Response: 204
"! Response: 401
"! Response: default
"!     application/json, #/components/schemas/Error
  methods DELETECONNECTOR
    importing
      !ID type STRING
    raising
      CX_STATIC_CHECK .
"! GET - "Retrieve load balancer details"
"! Operation id: GetLoadBalancerDetails
"! Parameter: id, required, path
"! Response: 200
"!     application/json; charset=UTF-8, array
"! Response: 401
"! Response: 403
"! Response: 404
"! Response: 503
"! Response: default
"!     application/json, #/components/schemas/Error
  methods GETLOADBALANCERDETAILS
    importing
      !ID type STRING
    raising
      CX_STATIC_CHECK .
"! GET - "List contracts"
"! Operation id: ListContracts
"! Parameter: filter_tokens, optional, query
"! Parameter: sort, optional, query
"! Parameter: page, optional, query
"! Parameter: rpp, optional, query
"! Response: 200
"!     application/json; charset=UTF-8, array
"! Response: 401
"! Response: 403
"! Response: 404
"! Response: 503
"! Response: default
"!     application/json, #/components/schemas/Error
  methods LISTCONTRACTS
    importing
      !FILTER_TOKENS type ABAP_BOOL optional
      !SORT type STRING optional
      !PAGE type I optional
      !RPP type I optional
    raising
      CX_STATIC_CHECK .
"! POST - "Deploy contract"
"! Operation id: DeployContract
"! Response: 201
"!     application/json; charset=UTF-8, #/components/schemas/Contract
"! Response: 401
"! Response: 403
"! Response: 404
"! Response: 422
"!     application/json, #/components/schemas/Error
"! Response: 503
"! Body ref: #/components/schemas/Contract
  methods DEPLOYCONTRACT
    importing
      !BODY type CONTRACT
    raising
      CX_STATIC_CHECK .
"!! GET - "Get contract detail"
"! Operation id: GetContractDetail
"! Parameter: id, required, path
"! Response: 200
"!     application/json; charset=UTF-8, #/components/schemas/Contract
"! Response: 401
"! Response: 403
"! Response: 404
"! Response: 503
"! Response: default
"!!     application/json, #/components/schemas/Error
  methods GETCONTRACTDETAIL
    importing
      !ID type STRING
    raising
      CX_STATIC_CHECK .
"! POST - "Execute contract"
"! Operation id: ExecuteContract
"! Parameter: id, required, path
"! Response: 202
"! Response: 401
"! Response: 403
"! Response: 404
"! Response: 503
"! Body ref: #/components/schemas/ExecuteContractRequest
  methods EXECUTECONTRACT
    importing
      !ID type STRING
      !BODY type EXECUTECONTRACTREQUEST
    raising
      CX_STATIC_CHECK .
"! GET - "List networks"
"! Operation id: ListNetworks
"! Parameter: page, optional, query
"! Parameter: rpp, optional, query
"! Parameter: public, optional, query
"! Response: 200
"!     application/json; charset=UTF-8, array
"! Response: 401
"! Response: 403
"! Response: 404
"! Response: 503
  methods LISTNETWORKS
    importing
      !PAGE type I optional
      !RPP type I optional
      !PUBLIC type ABAP_BOOL optional
    raising
      CX_STATIC_CHECK .
"! POST - "Create network"
"! Operation id: CreateNetwork
"! Response: 201
"!     application/json; charset=UTF-8, #/components/schemas/Network
"! Response: 401
"! Response: 403
"! Response: 404
"! Response: 503
"! Body ref: #/components/schemas/Network
  methods CREATENETWORK
    importing
      !BODY type NETWORK
    raising
      CX_STATIC_CHECK .
"! PUT - "Update network"
"! Operation id: UpdateNetwork
"! Parameter: id, required, path
"! Response: 204
"!     application/json, #/components/responses/NoContent
"! Response: 401
"! Response: 403
"! Response: 404
"! Response: 503
"! Body ref: #/components/schemas/Network
  methods UPDATENETWORK
    importing
      !ID type STRING
      !BODY type NETWORK
    raising
      CX_STATIC_CHECK .
"! GET - "Get network status"
"! Operation id: GetNetworkStatus
"! Parameter: id, required, path
"! Response: 200
"!     application/json; charset=UTF-8, #/components/schemas/NetworkStatus
"! Response: 401
"! Response: 403
"! Response: 404
"! Response: 503
"! Response: default
"!     application/json, #/components/schemas/Error
  methods GETNETWORKSTATUS
    importing
      !ID type STRING
    raising
      CX_STATIC_CHECK .
"! GET - "List oracles"
"! Operation id: ListOracles
"! Parameter: page, optional, query
"! Parameter: rpp, optional, query
"! Response: 200
"! Response: 401
"! Response: 403
"! Response: 404
"! Response: 503
  methods LISTORACLES
    importing
      !PAGE type I optional
      !RPP type I optional
    raising
      CX_STATIC_CHECK .
"! POST - "Create oracle"
"! Operation id: CreateOracle
"! Response: 200
"! Response: 401
"! Response: 403
"! Response: 404
"! Response: 503
  methods CREATEORACLE
    raising
      CX_STATIC_CHECK .
"! GET - "Get oracle details"
"! Operation id: GetOracleDetail
"! Parameter: id, required, path
"! Response: 200
"! Response: 401
"! Response: 403
"! Response: 404
"! Response: 503
  methods GETORACLEDETAIL
    importing
      !ID type STRING
    raising
      CX_STATIC_CHECK .
"! PUT - "Update oracle"
"! Operation id: UpdateOracle
"! Parameter: id, required, path
"! Response: 200
"! Response: 401
"! Response: 403
"! Response: 404
"! Response: 503
  methods UPDATEORACLE
    importing
      !ID type STRING
    raising
      CX_STATIC_CHECK .
"! DELETE - "Delete oracle"
"! Operation id: DeleteOracle
"! Parameter: id, required, path
"! Response: 200
"! Response: 401
"! Response: 403
"! Response: 404
"! Response: 503
  methods DELETEORACLE
    importing
      !ID type STRING
    raising
      CX_STATIC_CHECK .
"! GET - "List organizations"
"! Operation id: ListOrganizations
"! Parameter: page, optional, query
"! Parameter: rpp, optional, query
"! Response: 200
"! Response: 401
"! Response: 403
"! Response: 404
"! Response: 503
  methods LISTORGANIZATIONS
    importing
      !PAGE type I optional
      !RPP type I optional
    raising
      CX_STATIC_CHECK .
"! POST - "Create organization"
"! Operation id: CreateOrganization
"! Response: 201
"! Response: 401
"! Response: 403
"! Response: 404
"! Response: 503
"! Body ref: #/components/schemas/Organization
  methods CREATEORGANIZATION
    importing
      !BODY type ORGANIZATION
    raising
      CX_STATIC_CHECK .
"! GET - "Get organization details"
"! Operation id: GetOrganizationDetails
"! Parameter: id, required, path
"! Response: 200
"! Response: 401
"! Response: 403
"! Response: 404
"! Response: 503
  methods GETORGANIZATIONDETAILS
    importing
      !ID type STRING
    raising
      CX_STATIC_CHECK .
"! PUT - "Update organization details"
"! Operation id: UpdateOrganizationDetails
"! Parameter: id, required, path
"! Response: 200
"! Response: 401
"! Response: 403
"! Response: 404
"! Response: 503
"! Body ref: #/components/schemas/Organization
  methods UPDATEORGANIZATIONDETAILS
    importing
      !ID type STRING
      !BODY type ORGANIZATION
    raising
      CX_STATIC_CHECK .
"! GET - "List revocable tokens"
"! Operation id: ListTokens
"! Parameter: page, optional, query
"! Parameter: rpp, optional, query
"! Response: 200
"!     application/json, #/components/schemas/response_listtokens
"! Response: 401
"! Response: 403
"! Response: 404
"! Response: 503
  methods LISTTOKENS
    importing
      !PAGE type I optional
      !RPP type I optional
    returning
      value(RETURN_DATA) type RESPONSE_LISTTOKENS
    raising
      CX_STATIC_CHECK .
"! POST - "Token authorization"
"! Operation id: TokenAuthorization
"! Response: 201
"!     application/json, #/components/schemas/Token
"! Response: 401
"! Response: 403
"! Response: 404
"! Response: 503
"! Body ref: #/components/schemas/Token
  methods TOKENAUTHORIZATION
    importing
      !BODY type TOKEN
    returning
      value(RETURN_DATA) type TOKEN
    raising
      CX_STATIC_CHECK .
"! DELETE - "Revoke token"
"! Operation id: RevokeToken
"! Parameter: id, required, path
"! Response: 200
"! Response: 401
"! Response: 403
"! Response: 404
"! Response: 503
  methods REVOKETOKEN
    importing
      !ID type STRING
    raising
      CX_STATIC_CHECK .
"! GET - "List transactions"
"! Operation id: ListTransactions
"! Parameter: filter_contract_creations, optional, query
"! Parameter: status, optional, query
"! Parameter: page, optional, query
"! Parameter: rpp, optional, query
"! Response: 200
"!     application/json; charset=UTF-8, array
"! Response: 401
"! Response: 403
"! Response: 404
"! Response: 503
  methods LISTTRANSACTIONS
    importing
      !FILTER_CONTRACT_CREATIONS type ABAP_BOOL optional
      !STATUS type STRING optional
      !PAGE type I optional
      !RPP type I optional
    raising
      CX_STATIC_CHECK .
"! POST - "Create transaction"
"! Operation id: CreateTransaction
"! Response: 201
"!     application/json; charset=UTF-8, #/components/schemas/Transaction
"! Response: 401
"! Response: 403
"! Response: 404
"! Response: 503
"! Body ref: #/components/schemas/Transaction
  methods CREATETRANSACTION
    importing
      !BODY type TRANSACTION
    raising
      CX_STATIC_CHECK .
"! GET - "Get transaction details"
"! Operation id: GetTransactionDetails
"! Parameter: id, required, path
"! Response: 200
"!     application/json; charset=UTF-8, #/components/schemas/Transaction
"! Response: 401
"! Response: 403
"! Response: 404
"! Response: 503
  methods GETTRANSACTIONDETAILS
    importing
      !ID type STRING
    raising
      CX_STATIC_CHECK .
"! GET - "List users"
"! Operation id: ListUsers
"! Parameter: page, optional, query
"! Parameter: rpp, optional, query
"! Response: 200
"!     application/json, #/components/schemas/response_listusers
"! Response: 401
"! Response: 403
"! Response: 404
"! Response: 503
  methods LISTUSERS
    importing
      !PAGE type I optional
      !RPP type I optional
    returning
      value(RETURN_DATA) type RESPONSE_LISTUSERS
    raising
      CX_STATIC_CHECK .
"! POST - "Create user"
"! Operation id: CreateUser
"! Response: 201
"!     application/json, #/components/schemas/User
"! Body ref: #/components/schemas/User
  methods CREATEUSER
    importing
      !BODY type USER
    returning
      value(RETURN_DATA) type USER
    raising
      CX_STATIC_CHECK .
"! GET - "Get user detail"
"! Operation id: GetUserDetail
"! Parameter: id, required, path
"! Response: 200
"!     application/json; charset=UTF-8, #/components/schemas/User
"! Response: 401
"! Response: 403
"! Response: 404
"! Response: 503
"! Response: default
"!     application/json, #/components/schemas/Error
  methods GETUSERDETAIL
    importing
      !ID type STRING
    raising
      CX_STATIC_CHECK .
"! PUT - "Update user"
"! Operation id: UpdateUser
"! Parameter: id, required, path
"! Response: 200
"!     application/json, #/components/schemas/User
"! Response: 401
"! Response: 403
"! Response: 404
"! Response: 503
"! Body ref: #/components/schemas/User
  methods UPDATEUSER
    importing
      !ID type STRING
      !BODY type USER
    returning
      value(RETURN_DATA) type USER
    raising
      CX_STATIC_CHECK .
"! DELETE - "Delete user"
"! Operation id: DeleteUserRequest
"! Parameter: id, required, path
"! Response: 200
"! Response: 401
"! Response: 403
"! Response: 404
"! Response: 503
  methods DELETEUSERREQUEST
    importing
      !ID type STRING
    raising
      CX_STATIC_CHECK .
"! POST - "Unseal vault"
"! Operation id: UnsealVault
"! Response: 204
"! Response: 401
"! Response: 403
"! Response: 404
"! Response: 503
"! Body ref: #/components/schemas/UnsealVaultRequest
  methods UNSEALVAULT
    importing
      !BODY type UNSEALVAULTREQUEST
    raising
      CX_STATIC_CHECK .
"! GET - "List vaults"
"! Operation id: ListVaults
"! Parameter: page, optional, query
"! Parameter: rpp, optional, query
"! Response: 200
"!     application/json; charset=UTF-8, array
"! Response: 401
"! Response: 403
"! Response: 404
"! Response: 503
  methods LISTVAULTS
    importing
      !PAGE type I optional
      !RPP type I optional
    raising
      CX_STATIC_CHECK .
"! POST - "Create a vault"
"! Operation id: CreateVault
"! Response: 201
"!     application/json; charset=UTF-8, #/components/schemas/Vault
"! Response: 401
"! Response: 403
"! Response: 404
"! Response: 503
"! Body ref: #/components/schemas/Vault
  methods CREATEVAULT
    importing
      !BODY type VAULT
    raising
      CX_STATIC_CHECK .
"! GET - "List keys"
"! Operation id: Listkeys
"! Parameter: id, required, path
"! Parameter: page, optional, query
"! Parameter: rpp, optional, query
"! Response: 200
"!     application/json; charset=UTF-8, array
"! Response: 401
"! Response: 403
"! Response: 404
"! Response: 503
  methods LISTKEYS
    importing
      !ID type STRING
      !PAGE type I optional
      !RPP type I optional
    raising
      CX_STATIC_CHECK .
"! POST - "Create a key"
"! Operation id: CreateKey
"! Parameter: id, required, path
"! Response: 201
"!     application/json; charset=UTF-8, #/components/schemas/Key
"! Response: 401
"! Response: 403
"! Response: 404
"! Response: 503
"! Body ref: #/components/schemas/Key
  methods CREATEKEY
    importing
      !ID type STRING
      !BODY type KEY
    raising
      CX_STATIC_CHECK .
"! POST - "Derive a key"
"! Operation id: DeriveaKeyRequest
"! Parameter: id, required, path
"! Parameter: key_id, required, path
"! Response: 201
"!     application/json; charset=UTF-8, #/components/schemas/DeriveKeyRequest
"! Response: 401
"! Response: 403
"! Response: 404
"! Response: 503
"! Body ref: #/components/schemas/Key
  methods DERIVEAKEYREQUEST
    importing
      !ID type STRING
      !KEY_ID type STRING
      !BODY type KEY
    raising
      CX_STATIC_CHECK .
"! DELETE - "Delete a key"
"! Operation id: Deleteakey
"! Parameter: id, required, path
"! Parameter: key_id, required, path
"! Response: 204
"! Response: 401
"! Response: 403
"! Response: 404
"! Response: 503
  methods DELETEAKEY
    importing
      !ID type STRING
      !KEY_ID type STRING
    raising
      CX_STATIC_CHECK .
"! GET - "List secrets"
"! Operation id: ListSecrets
"! Parameter: id, required, path
"! Parameter: page, optional, query
"! Parameter: rpp, optional, query
"! Response: 200
"!     application/json; charset=UTF-8, array
"! Response: 401
"! Response: 403
"! Response: 404
"! Response: 503
  methods LISTSECRETS
    importing
      !ID type STRING
      !PAGE type I optional
      !RPP type I optional
    raising
      CX_STATIC_CHECK .
"! POST - "Store secret"
"! Operation id: StoreSecret
"! Parameter: id, required, path
"! Response: 201
"!     application/json; charset=UTF-8, #/components/schemas/Secret
"! Response: 401
"! Response: 403
"! Response: 404
"! Response: 503
"! Body ref: #/components/schemas/Secret
  methods STORESECRET
    importing
      !ID type STRING
      !BODY type SECRET
    raising
      CX_STATIC_CHECK .
"! GET - "Retrieve secret"
"! Operation id: RetrieveSecret
"! Parameter: id, required, path
"! Parameter: secret_id, required, path
"! Response: 200
"!     application/json; charset=UTF-8, #/components/schemas/Secret
"! Response: 401
"! Response: 403
"! Response: 404
"! Response: 503
  methods RETRIEVESECRET
    importing
      !ID type STRING
      !SECRET_ID type STRING
    raising
      CX_STATIC_CHECK .
"! DELETE - "Delete secret"
"! Operation id: DeleteSecret
"! Parameter: id, required, path
"! Parameter: secret_id, required, path
"! Response: 204
"!     application/json; charset=UTF-8, #/components/schemas/Secret
"! Response: 401
"! Response: 403
"! Response: 404
"! Response: 503
  methods DELETESECRET
    importing
      !ID type STRING
      !SECRET_ID type STRING
    raising
      CX_STATIC_CHECK .
"! GET - "List wallets"
"! Operation id: ListWallets
"! Parameter: page, optional, query
"! Parameter: rpp, optional, query
"! Response: 200
"!     application/json; charset=UTF-8, array
"! Response: 401
"! Response: 403
"! Response: 404
"! Response: 503
  methods LISTWALLETS
    importing
      !PAGE type I optional
      !RPP type I optional
    raising
      CX_STATIC_CHECK .
"! POST - "Create wallet"
"! Operation id: CreateWallet
"! Response: 201
"!     application/json; charset=UTF-8, #/components/schemas/Wallet
"! Response: 401
"! Response: 403
"! Response: 404
"! Response: 503
"! Body ref: #/components/schemas/Wallet
  methods CREATEWALLET
    importing
      !BODY type WALLET
    raising
      CX_STATIC_CHECK .
"! GET - "List wallet accounts"
"! Operation id: ListWalletAccounts
"! Parameter: id, required, path
"! Parameter: rpp, optional, query
"! Response: 200
"!     application/json; charset=UTF-8, array
"! Response: 401
"! Response: 403
"! Response: 404
"! Response: 503
  methods LISTWALLETACCOUNTS
    importing
      !ID type STRING
      !RPP type I optional
    raising
      CX_STATIC_CHECK .
"! GET - "List workgroups"
"! Operation id: ListWorkgroups
"! Parameter: page, optional, query
"! Parameter: rpp, optional, query
"! Response: 200
"!     application/json, #/components/schemas/response_listworkgroups
  methods LISTWORKGROUPS
    importing
      !PAGE type I optional
      !RPP type I optional
    returning
      value(RETURN_DATA) type RESPONSE_LISTWORKGROUPS
    raising
      CX_STATIC_CHECK .
"! POST - "Create workgroup"
"! Operation id: CreateWorkgroup
"! Response: 200
"!     application/json, #/components/schemas/Workgroup
"! Response: 401
"! Response: 403
"! Response: 404
"! Response: 503
"! Body ref: #/components/schemas/Workgroup
  methods CREATEWORKGROUP
    importing
      !BODY type WORKGROUP
    returning
      value(RETURN_DATA) type WORKGROUP
    raising
      CX_STATIC_CHECK .
"! GET - "List workgroup users"
"! Operation id: ListWorkgroupUsers
"! Parameter: id, required, path
"! Parameter: page, optional, query
"! Parameter: rpp, optional, query
"! Response: 200
"!     application/json, #/components/schemas/response_listworkgroupusers
"! Response: 401
"! Response: 403
"! Response: 404
"! Response: 503
  methods LISTWORKGROUPUSERS
    importing
      !ID type STRING
      !PAGE type I optional
      !RPP type I optional
    returning
      value(RETURN_DATA) type RESPONSE_LISTWORKGROUPUSERS
    raising
      CX_STATIC_CHECK .
"! POST - "Associate workgroup user"
"! Operation id: AssociateWorkgroupUser
"! Parameter: id, required, path
"! Response: 201
"! Response: 401
"! Response: 403
"! Response: 404
"! Response: 503
"! Body ref: #/components/schemas/AssociateWorkgroupUserRequest
  methods ASSOCIATEWORKGROUPUSER
    importing
      !ID type STRING
      !BODY type ASSOCIATEWORKGROUPUSERREQUEST
    raising
      CX_STATIC_CHECK .
"! GET - "Get workgroup details"
"! Operation id: GetWorkgroupDetails
"! Parameter: id, required, path
"! Response: 200
"! Response: 401
"! Response: 403
"! Response: 404
"! Response: 503
  methods GETWORKGROUPDETAILS
    importing
      !ID type STRING
    raising
      CX_STATIC_CHECK .
"! PUT - "Update workgroup"
"! Operation id: UpdateWorkgroup
"! Parameter: id, required, path
"! Response: 204
"! Response: 401
"! Response: 403
"! Response: 404
"! Response: 503
"! Body ref: #/components/schemas/Workgroup
  methods UPDATEWORKGROUP
    importing
      !ID type STRING
      !BODY type WORKGROUP
    raising
      CX_STATIC_CHECK .
"! DELETE - "Delete workgroup"
"! Operation id: DeleteWorkgroup
"! Parameter: id, required, path
"! Response: 200
"! Response: 401
"! Response: 403
"! Response: 404
"! Response: 503
  methods DELETEWORKGROUP
    importing
      !ID type STRING
    raising
      CX_STATIC_CHECK .
"! POST - "Create a business object"
"! Operation id: CreateBaselineBusinessObject
"! Response: 202
"!     application/json, #/components/responses/Accepted
"! Response: 401
"! Response: 403
"! Response: 404
"!     application/json, #/components/schemas/Error
"! Response: 503
"! Body ref: #/components/schemas/BusinessObject
  methods CREATEBASELINEBUSINESSOBJECT
    importing
      !BODY type BUSINESSOBJECT
    exporting
      !STATUSCODE type I
      !APIRESPONSESTR type STRING
      !APIRESPONSE type ref to DATA
    raising
      CX_STATIC_CHECK .
"! PUT - "Update a business object"
"! Operation id: UpdateBaselineBusinessObject
"! Parameter: id, required, path
"! Response: 200
"! Response: 401
"! Response: 403
"! Response: 404
"! Response: 503
"! Body ref: #/components/schemas/BusinessObject
  methods UPDATEBASELINEBUSINESSOBJECT
    importing
      !ID type STRING
      !BODY type BUSINESSOBJECT
    raising
      CX_STATIC_CHECK .
"! GET - "List Circuits"
"! Operation id: ListCircuits
"! Parameter: curve, optional, query
"! Parameter: identifier, optional, query
"! Parameter: provider, optional, query
"! Parameter: proving scheme, optional, query
"! Parameter: status, optional, query
"! Response: 200
"!     application/json; charset=UTF-8, array
"! Response: 401
"! Response: 403
"! Response: 404
"! Response: 503
  methods LISTCIRCUITS
    importing
      !CURVE type STRING optional
      !IDENTIFIER type STRING optional
      !PROVIDER type STRING optional
      !PROVING_SCHEME type STRING optional
      !STATUS type STRING optional
    raising
      CX_STATIC_CHECK .
"! POST - "Create circuit"
"! Operation id: CreateCircuit
"! Response: 200
"! Response: 401
"! Response: 403
"! Response: 404
"! Response: 503
"! Body ref: #/components/schemas/Circuit
  methods CREATECIRCUIT
    importing
      !BODY type CIRCUIT
    raising
      CX_STATIC_CHECK .
"! POST - "Prove circuit"
"! Operation id: Prove
"! Parameter: id, required, path
"! Response: 200
"! Response: 401
"! Response: 403
"! Response: 404
"! Response: 422
"! Response: 503
"! Body ref: #/components/schemas/ProveRequest
  methods PROVE
    importing
      !ID type STRING
      !BODY type PROVEREQUEST
    raising
      CX_STATIC_CHECK .
"! POST - "Verify"
"! Operation id: Verify
"! Parameter: id, required, path
"! Response: 200
"! Response: 401
"! Response: 403
"! Response: 404
"! Response: 503
"! Body ref: #/components/schemas/VerifyProofRequest
  methods VERIFY
    importing
      !ID type STRING
      !BODY type VERIFYPROOFREQUEST
    raising
      CX_STATIC_CHECK .
"! GET - "Retrieve store value"
"! Operation id: GetStoreValue
"! Parameter: id, required, path
"! Parameter: index, required, path
"! Response: 200
"! Response: 401
"! Response: 403
"! Response: 404
"! Response: 503
  methods GETSTOREVALUE
    importing
      !ID type STRING
      !INDEX type STRING
    raising
      CX_STATIC_CHECK .
"! GET - "JSON Web Key Set (JWK)"
"! Operation id: ListWellKnownKeys
"! Response: 200
"!     application/json; charset=UTF-8, array
"! Response: default
"!     application/json, #/components/schemas/Error
  methods LISTWELLKNOWNKEYS
    raising
      CX_STATIC_CHECK .
"! GET - "Returns OpenID configuration"
"! Operation id: ListOpenIDConfiguration
"! Response: 200
"!     application/json; charset=UTF-8, #/components/schemas/OpenIDConfig
"! Response: default
"!     application/json, #/components/schemas/Error
  methods LISTOPENIDCONFIGURATION
    raising
      CX_STATIC_CHECK .
"! POST
"! "!https://gist.github.com/kthomas/459381e98c808febea9c1bb51408bbde
  methods SEND_PROTOCOL_MSG
    importing
      !IV_BODY type PROTOCOLMESSAGE_REQ
      !IV_BPITOKEN type ZPRVDREFRESHTOKEN
    exporting
      !EV_STATUSCODE type I
      !EV_APIRESPONSESTR type STRING
      !EV_APIRESPONSE type ref to DATA
    raising
      CX_STATIC_CHECK .
  methods STATUS
    exporting
      !STATUSCODE type I
    raising
      CX_STATIC_CHECK .
  methods SEND_BPIOBJECTS_MSG
    importing
      !BODY type BPIOBJECTS_REQ
    exporting
      !STATUSCODE type I
      !APIRESPONSESTR type STRING
      !APIRESPONSE type ref to DATA
    raising
      CX_STATIC_CHECK .
endinterface.
